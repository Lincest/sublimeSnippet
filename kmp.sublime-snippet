<snippet>
	<content><![CDATA[
/* kmp 算法
next : 用于求next数组, 返回next数组, 注意"真正的next数组是这里next的index = 1-n, 用于kmp的是0-(n-1)"
kmp : 用于求kmp, 返回s2在s1中出现的位置(头部)
*/
vector<int> getnext(string s) {
	vector<int> next;
	next.push_back(-1);
	int i = 0, j = -1;	// j指向公共前后缀前缀的最后一个元素上, 表示最长公共前后缀长度
	while(i < s.size()) {
		if(s[i] == s[j] || j==-1) {
			i++;
			j++;
			next.push_back(j);
		}
		else {
			j = next[j]; // 如果s[i]!=s[j]说明匹配失败, 回到上一级公共前后缀处
		}
	}
	return next;
}

vector<int> kmp(string s1, string s2) {	// kmp : 找出s2在s1中出现的位置(全部)
	vector<int> next = getnext(s2);
	vector<int> ans;
	int i = 0, j = 0; 	// i指s1, j指s2
	while(i < s1.size()) {
		if(s1[i] == s2[j] || j==-1) {
			if(j == s2.size()-1) { // 如果匹配完了s2
				ans.push_back(i - j); // ans += s2首部在s1中的位置
				j = next[j];
			}
			else {
				i++;
				j++;
			}
		}
		else {
			j = next[j];
		}
	}
	return ans;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kmp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
